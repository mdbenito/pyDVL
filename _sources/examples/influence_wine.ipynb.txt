{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a75acfec",
   "metadata": {},
   "source": [
    "# Clean dataset using influence functions and neural networks\n",
    "\n",
    "This notebook shows how to calculate influences on a NN model using pyDVL for an arbitrary dataset.\n",
    "\n",
    "It uses the wine dataset from sklearn: given a set of 13 different input parameters regarding a particular bottle, each related to some physical property (e.g. concentration of magnesium, malic acidity, alcoholic percentage, etc), the model will need to predict to which of 3 classes the wine belongs to. For more details, please refer to the [sklearn documentation](https://scikit-learn.org/stable/datasets/toy_dataset.html#wine-recognition-dataset)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68ec440b",
   "metadata": {},
   "source": [
    "Let's start by loading the imports, the dataset and splitting it into train, validation and test sets. We will use a large test set to have a less noisy estimate of the average influence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "be813151",
   "metadata": {},
   "outputs": [],
   "source": [
    "from valuation.utils.dataset import load_wine_dataset\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "from valuation.influence.model_wrappers import TorchNeuralNetwork\n",
    "import torch.nn.functional as F\n",
    "from torch.optim import Adam, lr_scheduler\n",
    "import numpy as np\n",
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, f1_score\n",
    "\n",
    "train_ds, val_ds, test_ds = load_wine_dataset(train_size=0.3, test_size=0.6)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a018e72c",
   "metadata": {},
   "source": [
    "## Fit a neural network to the data\n",
    "\n",
    "We will train a 2-layer neural network. PyDVL has some convenience wrappers to initialize a pytorch NN. If you already have a model loaded and trained, you can skip this section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "00dc59af",
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_dimension = train_ds[0].shape[1]\n",
    "unique_classes = np.unique(np.concatenate((train_ds[1], test_ds[1])))\n",
    "num_classes = len(unique_classes)\n",
    "network_size = [16, 16]\n",
    "\n",
    "num_epochs = 300\n",
    "lr = 0.005\n",
    "weight_decay = 0.01\n",
    "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "nn = TorchNeuralNetwork(feature_dimension, num_classes, network_size)\n",
    "nn.to(device)\n",
    "optimizer = Adam(params=nn.parameters(), lr=lr, weight_decay=weight_decay)\n",
    "scheduler = lr_scheduler.CosineAnnealingLR(optimizer, T_max=num_epochs)\n",
    "\n",
    "train_loss, val_loss = nn.fit(\n",
    "    x_train=train_ds[0],\n",
    "    y_train=train_ds[1],\n",
    "    x_val=val_ds[0],\n",
    "    y_val=val_ds[1],\n",
    "    loss=F.cross_entropy,\n",
    "    optimizer=optimizer,\n",
    "    scheduler=scheduler,\n",
    "    num_epochs=num_epochs,\n",
    "    batch_size=16,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a3ba188",
   "metadata": {},
   "source": [
    "Let's check that the training has found a stable minimum by plotting the train and validation loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f4b57b77",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAlMAAAGbCAYAAADgEhWsAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8rg+JYAAAACXBIWXMAAAsTAAALEwEAmpwYAAAwaUlEQVR4nO3de5SkdX3n8c+37pe+X4YZpgdnGJDhloCOBIOJRDQZMILxBqjRJCZkPZCoq5wz8WQNetxdc84m2ZDFeHCXeDkqIXhjDQajgkYFZViQ6wADA0wPc+mZvkxfq7qqfvvH81R3dU91d3VVdT/dVe/XOXWq6nmeqvr2QwGf8/396veYc04AAACoTijoAgAAANYzwhQAAEANCFMAAAA1IEwBAADUgDAFAABQg0hQH9zT0+O2bt0a1McDAABU7KGHHjrmnOstty+wMLV161bt2bMnqI8HAAComJm9uNA+hvkAAABqQJgCAACoAWEKAACgBoHNmQIAAOvH9PS0+vv7NTU1FXQpKyqRSKivr0/RaLTi1xCmAADAkvr7+9Xa2qqtW7fKzIIuZ0U453T8+HH19/dr27ZtFb+OYT4AALCkqakpdXd3N2yQkiQzU3d397K7b4QpAABQkUYOUkXV/I2EKQAAgBoQpgAAwJo3PDysz372s8t+3RVXXKHh4eH6F1SCMAUAANa8hcJULpdb9HV33323Ojo6VqgqD7/mAwAAa97u3bv13HPP6YILLlA0GlUikVBnZ6f27t2rZ555Rm9961t14MABTU1N6UMf+pCuu+46SbOXrxsbG9Pll1+u173udfrZz36mzZs369vf/raSyWTNtRGmAADAsnzy/z6hJ18+Udf3POfUNv3VW85dcP9nPvMZPf7443rkkUd033336c1vfrMef/zxmSUMbrvtNnV1dWlyclKvec1r9Pa3v13d3d1z3uPZZ5/V1772NX3+85/Xu971Ln3961/Xe9/73pprJ0wBAIB156KLLpqzFtTNN9+sb37zm5KkAwcO6Nlnnz0pTG3btk0XXHCBJOnVr361XnjhhbrUQpgCAADLslgHabWk0+mZx/fdd5++//3v6/7771cqldKll15adq2oeDw+8zgcDmtycrIutTTsBPSxTE5PHTqhqel80KUAAIAatba2anR0tOy+kZERdXZ2KpVKae/evXrggQdWtbaGDVM/efaYLv/7/9DzA+NBlwIAAGrU3d2tSy65ROedd55uvPHGOft27dqlXC6ns88+W7t379bFF1+8qrU17DBfKhaWJE1kF//JJAAAWB+++tWvlt0ej8f13e9+t+y+4ryonp4ePf744zPbP/axj9WtrobtTKXjxTDFMB8AAFg5DRumUjGv6UZnCgAArKQGDlNeZ2o8Q2cKAACsnAYOU35nil/zAQCAFdSwYWpmzlSGYT4AALByGjZMJSL+MB8T0AEAwApq2DAVCplSsbAmmYAOAEDTaWlpWbXPatgwJXnzpuhMAQCAldSwi3ZK8jtThCkAANa73bt3a8uWLbr++uslSTfddJMikYjuvfdeDQ0NaXp6Wp/+9Kd11VVXrXptDR+mxpmADgBAfX13t3T4sfq+58bzpcs/s+Duq6++Wh/+8IdnwtQdd9yhe+65R3/+53+utrY2HTt2TBdffLGuvPJKmVl9a1tCQ4epdDzCCugAADSACy+8UEePHtXLL7+sgYEBdXZ2auPGjfrIRz6iH//4xwqFQjp48KCOHDmijRs3rmptDR2m6EwBALACFukgraR3vvOduvPOO3X48GFdffXV+spXvqKBgQE99NBDikaj2rp1q6ampla9rgafgB6mMwUAQIO4+uqrdfvtt+vOO+/UO9/5To2MjGjDhg2KRqO699579eKLLwZSV4N3piIaZ2kEAAAawrnnnqvR0VFt3rxZmzZt0nve8x695S1v0fnnn6+dO3dqx44dgdTV4GGKX/MBANBIHntsduJ7T0+P7r///rLHjY2NrVZJjT3Ml45HuNAxAABYUQ0dppLRsCan8yoUXNClAACABtXQYap4sePJabpTAADUyrnGb05U8zc2dJhKRb0/j0noAADUJpFI6Pjx4w0dqJxzOn78uBKJxLJe17gT0J/5nt5x3wd1sz6piUxeag26IAAA1q++vj719/drYGAg6FJWVCKRUF9f37Je07hhqnu7Epljuir8U01krwy6GgAA1rVoNKpt27YFXcaa1LjDfN3bdaL7V/W28E80wTAfAABYIY0bpiQNn/k2nR16STryRNClAACABtXQYWrqlW/VtAur+7lvBF0KAABoUA0dphLtG/Sjwq+ot//fgy4FAAA0qIYOU8lYWM+6PiUnD0kN/FNOAAAQnIYOU+l4WEddh8IuJ00OBV0OAABoQA0dphKRsAbU6T0Z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\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 7))\n",
    "plt.plot(train_loss, label=\"train\")\n",
    "plt.plot(val_loss, label=\"val\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3345522",
   "metadata": {},
   "source": [
    "Since it is a classification problem, let's also take a look at the confusion matrix on the test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "08f1cba4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fa8b8da6700>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred_y_test = np.argmax(nn(test_ds[0]).detach(), axis=1)\n",
    "\n",
    "cm = confusion_matrix(test_ds[1], pred_y_test)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n",
    "disp.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cca76db8",
   "metadata": {},
   "source": [
    "And let's compute the f1 score of the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ca48f9d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9720579357550395"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f1_score(test_ds[1], pred_y_test, average=\"weighted\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5332e2b4",
   "metadata": {},
   "source": [
    "Let's now move to calculating influences of each point on the total score."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45dbdd1e",
   "metadata": {},
   "source": [
    "## Calculating influences for small neural networks\n",
    "\n",
    "The following cell calculates the influences of each training data-point on the neural network error. \n",
    "The calculation of the Hessian matrix (necessary to calculate the influences) can be quite numerically challenging, but there are some techniques to speed up the calculation. PyDVL allows to use the full method (\"direct\") or the conjugate gradient method (\"cg\"). The first one should be used only for very small networks (like our current example), while for bigger ones \"cg\" is advisable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "218d0983",
   "metadata": {},
   "outputs": [],
   "source": [
    "from valuation.influence.general import influences\n",
    "\n",
    "inversion_method = \"direct\"  # cg for big networks\n",
    "\n",
    "train_influences = influences(\n",
    "    nn, F.cross_entropy, *train_ds, *test_ds, inversion_method=inversion_method\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce21c2dc",
   "metadata": {},
   "source": [
    "the returned matrix, train_influences, has a quantity of columns equal to the points in the training set, and a number of rows equal to the points in the test set. At each element $a_{i,j}$ it stores the influence that training point $j$ has on the classification of test point $i$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4153c7db",
   "metadata": {},
   "source": [
    "If we take the average across every column of the influences matrix, we obtain an estimate of the overall influence of a training point on the total accuracy of the network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9169c2dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "mean_train_influences = np.mean(train_influences, axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5e254ad",
   "metadata": {},
   "source": [
    "The following histogram shows that there are big differences in score within the training set (notice the log-scale on the y axis)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "233a57da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'number of points')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 7))\n",
    "plt.hist(mean_train_influences, log=True)\n",
    "plt.title(\"Influece scores distribution\")\n",
    "plt.xlabel(\"influece score\")\n",
    "plt.ylabel(\"number of points\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc27f78c",
   "metadata": {},
   "source": [
    "## Conjugate Gradient and beyond in PyDVL"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9245791c",
   "metadata": {},
   "source": [
    "This was a quick introduction to influence functions and how they could help you in your projects. Give it a try! For example you can try with a bigger neural network and using conjugate gradient for the calculation of influence functions. This can me done in the following way "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "450acac2",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_influences = influences(\n",
    "    nn,\n",
    "    F.cross_entropy,\n",
    "    *train_ds,\n",
    "    *test_ds,\n",
    "    inversion_method=\"cg\",\n",
    "    inversion_method_kwargs={\"max_iterations\": 10, \"max_step_size\": 0.01}\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e802d2d3",
   "metadata": {},
   "source": [
    "where max_iterations and max_step_size and yet another set of hyperparameters that need to be tuned to obtain a good estimate."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d563f8e",
   "metadata": {},
   "source": [
    "Finally, despite their speed and simplicity, influence functions are known to be a very noisy estimator of data quality, as pointed out in the paper [\"Influence functions in deep learning are fragile\"](https://arxiv.org/abs/2006.14651). The size of the network, the weight decay, the inversion method used for calculating influences, the size of the test set: they all add up to the total amount of noise in the influence values. Experiments may therefore give quantitative and qualitative different results if not averaged across several realisations. Shapley values, on the contrary, have shown to be a more robust, but this comes at the cost of high computational requirements. PyDVL employs several parallelization and caching techniques to optimize such calculations."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.4"
  },
  "vscode": {
   "interpreter": {
    "hash": "4e000971326892723e7f31ded70802f690c31c3620f59a0f99e594aaee3047ef"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
